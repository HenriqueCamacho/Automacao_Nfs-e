# -*- coding: utf-8 -*-
"""Nfse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16rBSzUTmOYr3gsVQvG1HDC6QD7fzFClF
"""

import os
import shutil
import re

#HELPER FUNCTIONS
def linearize_whitespace_regex(myString):
      myString = re.sub(r"[\n\t\s]*", "", myString)

      return myString

class automateNfse():
  '''Não funciona para modelos TXT ou modelos que não utilizem XML como forma de comunicação'''

  def __init__(self, Nomeprojeto, Nome_dll,copiar= False, Nome_proj_copia="",Nome_copia_dll="", Is_Sincrono = True):

    self.Nomeprojeto = Nomeprojeto
    #Nome da dll = cDeissV203 ou cDSF por exemplo
    self.Nome_dll = Nome_dll.replace(".dll","")
    self.copiar = copiar
    self.Nome_proj_copia = Nome_proj_copia
    self.Nome_copia_dll = (Nome_copia_dll).replace(".dll","")
    self.Is_Sincrono = Is_Sincrono

    #Arquivos da pasta myproject serão sempre estes, não importa se é para copiar ou não
    self.AppDesigner = ("\ufeff'------------------------------------------------------------------------------\n' <auto-generated>\n'     O código foi gerado por uma ferramenta.\n'     Versão de Tempo de Execução:4.0.30319.17929\n'\n'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se\n'     o código for gerado novamente.\n' </auto-generated>\n'------------------------------------------------------------------------------\n\n Option Strict On\n Option Explicit On").replace("c2931350",self.Nome_dll)
    self.AppMyapp = ("""\ufeff<?xml version="1.0" encoding="utf-8"?>\n<MyApplicationData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n  <MySubMain>false</MySubMain>\n  <SingleInstance>false</SingleInstance>\n  <ShutdownMode>0</ShutdownMode>\n  <EnableVisualStyles>true</EnableVisualStyles>\n  <AuthenticationMode>0</AuthenticationMode>\n  <ApplicationType>1</ApplicationType>\n  <SaveMySettingsOnExit>true</SaveMySettingsOnExit>\n</MyApplicationData>\n""").replace("c2931350",self.Nome_dll)
    self.AssemblyInfo = ("""Imports System\nImports System.Reflection\nImports System.Runtime.InteropServices\n\n' General Information about an assembly is controlled through the following \n' set of attributes. Change these attribute values to modify the information\n' associated with an assembly.\n\n' Review the values of the assembly attributes\n\n<Assembly: AssemblyTitle("c2931350")> \n<Assembly: AssemblyDescription("")> \n<Assembly: AssemblyCompany("NBS Informática")>      \n<Assembly: AssemblyProduct("c2931350")> \n<Assembly: AssemblyCopyright("Copyright ©  2012")> \n<Assembly: AssemblyTrademark("")> \n\n<Assembly: ComVisible(False)>\n\n'The following GUID is for the ID of the typelib if this project is exposed to COM\n<Assembly: Guid("9c1396de-7027-462f-bcf9-d46f5b92cb4f")> \n\n' Version information for an assembly consists of the following four values:\n\n'      Major Version\n'      Minor Version \n'      Build Number\n'      Revision\n'\n' You can specify all the values or you can default the Build and Revision Numbers \n' by using the '*' as shown below:\n\' <Assembly: AssemblyVersion("4.0.*")> \n\n<Assembly: AssemblyVersion("4.0.*")> \n\'<Assembly: AssemblyFileVersion("3.0.33.0")> \n""").replace("c2931350",self.Nome_dll)
    self.ResourcesDesigner = ("""\ufeff'------------------------------------------------------------------------------\n' <auto-generated>\n'     O código foi gerado por uma ferramenta.\n'     Versão de Tempo de Execução:4.0.30319.17929\n'\n'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se\n'     o código for gerado novamente.\n' </auto-generated>\n'------------------------------------------------------------------------------\n\nOption Strict On\nOption Explicit On\n\nImports System\n\nNamespace My.Resources\n    \n    'Essa classe foi gerada automaticamente pela classe StronglyTypedResourceBuilder\n    'através de uma ferramenta como ResGen ou Visual Studio.\n    'Para adicionar ou remover um associado, edite o arquivo .ResX e execute ResGen novamente\n    'com a opção /str, ou recrie o projeto do VS.\n    '''<summary>\n    '''  Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.\n    '''</summary>\n    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"),  _\n     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _\n     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _\n     Global.Microsoft.VisualBasic.HideModuleNameAttribute()>  _\n    Friend Module Resources\n        \n        Private resourceMan As Global.System.Resources.ResourceManager\n        \n        Private resourceCulture As Global.System.Globalization.CultureInfo\n        \n        '''<summary>\n        '''  Retorna a instância de ResourceManager armazenada em cache usada por essa classe.\n        '''</summary>\n        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _\n        Friend ReadOnly Property ResourceManager() As Global.System.Resources.ResourceManager\n            Get\n                If Object.ReferenceEquals(resourceMan, Nothing) Then\n                    Dim temp As Global.System.Resources.ResourceManager = New Global.System.Resources.ResourceManager("c2931350.Resources", GetType(Resources).Assembly)\n                    resourceMan = temp\n                End If\n                Return resourceMan\n            End Get\n        End Property\n        \n        '''<summary>\n        '''  Substitui a propriedade CurrentUICulture do thread atual para todas as\n        '''  pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.\n        '''</summary>\n        <Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _\n        Friend Property Culture() As Global.System.Globalization.CultureInfo\n            Get\n                Return resourceCulture\n            End Get\n            Set\n                resourceCulture = value\n            End Set\n        End Property\n    End Module\nEnd Namespace\n""").replace("c2931350",self.Nome_dll)
    self.ResourcesResx = ("""\ufeff<?xml version="1.0" encoding="utf-8"?>\n<root>\n  <!-- \n    Microsoft ResX Schema \n    \n    Version 2.0\n    \n    The primary goals of this format is to allow a simple XML format \n    that is mostly human readable. The generation and parsing of the \n    various data types are done through the TypeConverter classes \n    associated with the data types.\n    \n    Example:\n    \n    ... ado.net/XML headers & schema ...\n    <resheader name="resmimetype">text/microsoft-resx</resheader>\n    <resheader name="version">2.0</resheader>\n    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>\n    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>\n    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>\n    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>\n    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">\n        <value>[base64 mime encoded serialized .NET Framework object]</value>\n    </data>\n    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">\n        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>\n        <comment>This is a comment</comment>\n    </data>\n                \n    There are any number of "resheader" rows that contain simple \n    name/value pairs.\n    \n    Each data row contains a name, and value. The row also contains a \n    type or mimetype. Type corresponds to a .NET class that support \n    text/value conversion through the TypeConverter architecture. \n    Classes that don\'t support this are serialized and stored with the \n    mimetype set.\n    \n    The mimetype is used for serialized objects, and tells the \n    ResXResourceReader how to depersist the object. This is currently not \n    extensible. For a given mimetype the value must be set accordingly:\n    \n    Note - application/x-microsoft.net.object.binary.base64 is the format \n    that the ResXResourceWriter will generate, however the reader can \n    read any of the formats listed below.\n    \n    mimetype: application/x-microsoft.net.object.binary.base64\n    value   : The object must be serialized with \n            : System.Serialization.Formatters.Binary.BinaryFormatter\n            : and then encoded with base64 encoding.\n    \n    mimetype: application/x-microsoft.net.object.soap.base64\n    value   : The object must be serialized with \n            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter\n            : and then encoded with base64 encoding.\n\n    mimetype: application/x-microsoft.net.object.bytearray.base64\n    value   : The object must be serialized into a byte array \n            : using a System.ComponentModel.TypeConverter\n            : and then encoded with base64 encoding.\n    -->\n  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">\n    <xsd:element name="root" msdata:IsDataSet="true">\n      <xsd:complexType>\n        <xsd:choice maxOccurs="unbounded">\n          <xsd:element name="metadata">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name="value" type="xsd:string" minOccurs="0" />\n              </xsd:sequence>\n              <xsd:attribute name="name" type="xsd:string" />\n              <xsd:attribute name="type" type="xsd:string" />\n              <xsd:attribute name="mimetype" type="xsd:string" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name="assembly">\n            <xsd:complexType>\n              <xsd:attribute name="alias" type="xsd:string" />\n              <xsd:attribute name="name" type="xsd:string" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name="data">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />\n                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />\n              </xsd:sequence>\n              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />\n              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />\n              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />\n            </xsd:complexType>\n          </xsd:element>\n          <xsd:element name="resheader">\n            <xsd:complexType>\n              <xsd:sequence>\n                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />\n              </xsd:sequence>\n              <xsd:attribute name="name" type="xsd:string" use="required" />\n            </xsd:complexType>\n          </xsd:element>\n        </xsd:choice>\n      </xsd:complexType>\n    </xsd:element>\n  </xsd:schema>\n  <resheader name="resmimetype">\n    <value>text/microsoft-resx</value>\n  </resheader>\n  <resheader name="version">\n    <value>2.0</value>\n  </resheader>\n  <resheader name="reader">\n    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n  <resheader name="writer">\n    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\n  </resheader>\n</root>""").replace("c2931350",self.Nome_dll)
    self.SettingsDesigner = ("""\ufeff'------------------------------------------------------------------------------\n' <auto-generated>\n'     O código foi gerado por uma ferramenta.\n'     Versão de Tempo de Execução:4.0.30319.17929\n'\n'     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se\n'     o código for gerado novamente.\n' </auto-generated>\n'------------------------------------------------------------------------------\n\nOption Strict On\nOption Explicit On\n\n\nNamespace My\n    \n    <Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _\n     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0"),  _\n     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)>  _\n    Partial Friend NotInheritable Class MySettings\n        Inherits Global.System.Configuration.ApplicationSettingsBase\n        \n        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings()),MySettings)\n        \n#Region "Funcionalidade de Salvamento Automático de Minhas Configurações"\n#If _MyType = "WindowsForms" Then\n    Private Shared addedHandler As Boolean\n\n    Private Shared addedHandlerLockObject As New Object\n\n    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)> _\n    Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)\n        If My.Application.SaveMySettingsOnExit Then\n            My.Settings.Save()\n        End If\n    End Sub\n#End If\n#End Region\n        \n        Public Shared ReadOnly Property [Default]() As MySettings\n            Get\n                \n#If _MyType = "WindowsForms" Then\n               If Not addedHandler Then\n                    SyncLock addedHandlerLockObject\n                        If Not addedHandler Then\n                            AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings\n                            addedHandler = True\n                        End If\n                    End SyncLock\n                End If\n#End If\n                Return defaultInstance\n            End Get\n        End Property\n    End Class\nEnd Namespace\n\nNamespace My\n    \n    <Global.Microsoft.VisualBasic.HideModuleNameAttribute(),  _\n     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _\n     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()>  _\n    Friend Module MySettingsProperty\n        \n        <Global.System.ComponentModel.Design.HelpKeywordAttribute("My.Settings")>  _\n        Friend ReadOnly Property Settings() As Global.c2931350.My.MySettings\n            Get\n                Return Global.c2931350.My.MySettings.Default\n            End Get\n        End Property\n    End Module\nEnd Namespace\n""").replace("c2931350",self.Nome_dll)
    self.SettingsSettings = ("""\ufeff<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)" UseMySettingsClassName="true">\n  <Profiles>\n    <Profile Name="(Default)" />\n  </Profiles>\n  <Settings />\n</SettingsFile>\n""").replace("c2931350",self.Nome_dll)

    #Arquivos da pasta Debug que fica em NomeProjeto/obj/Debug
    #self.Debug = "" NECESSARIOS???

    #Arquivos sln e vbproj que também sempre serão o mesmo
    self.sln = ("""\ufeff\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 2012\nProject("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "c2931350", "c2931350.vbproj", "{3B5EA66B-508B-40FA-AEF5-CD12A16191C3}"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{3B5EA66B-508B-40FA-AEF5-CD12A16191C3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{3B5EA66B-508B-40FA-AEF5-CD12A16191C3}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{3B5EA66B-508B-40FA-AEF5-CD12A16191C3}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{3B5EA66B-508B-40FA-AEF5-CD12A16191C3}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n""").replace("c2931350",self.Nome_dll)
    self.vbproj = ("""\ufeff<?xml version="1.0" encoding="utf-8"?>\n<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">\n  <PropertyGroup>\n    <Configuration Condition=" \'$(Configuration)\' == \'\' ">Debug</Configuration>\n    <Platform Condition=" \'$(Platform)\' == \'\' ">AnyCPU</Platform>\n    <ProductVersion>8.0.50727</ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\n    <ProjectGuid>{3B5EA66B-508B-40FA-AEF5-CD12A16191C3}</ProjectGuid>\n    <OutputType>Library</OutputType>\n    <RootNamespace>c2931350</RootNamespace>\n    <AssemblyName>c2931350</AssemblyName>\n    <MyType>Windows</MyType>\n    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>\n    <FileUpgradeFlags>\n    </FileUpgradeFlags>\n    <UpgradeBackupLocation>\n    </UpgradeBackupLocation>\n    <OldToolsVersion>2.0</OldToolsVersion>\n    <TargetFrameworkProfile />\n    <PublishUrl>publicar\\</PublishUrl>\n    <Install>true</Install>\n    <InstallFrom>Disk</InstallFrom>\n    <UpdateEnabled>false</UpdateEnabled>\n    <UpdateMode>Foreground</UpdateMode>\n    <UpdateInterval>7</UpdateInterval>\n    <UpdateIntervalUnits>Days</UpdateIntervalUnits>\n    <UpdatePeriodically>false</UpdatePeriodically>\n    <UpdateRequired>false</UpdateRequired>\n    <MapFileExtensions>true</MapFileExtensions>\n    <ApplicationRevision>0</ApplicationRevision>\n    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>\n    <IsWebBootstrapper>false</IsWebBootstrapper>\n    <UseApplicationTrust>false</UseApplicationTrust>\n    <BootstrapperEnabled>true</BootstrapperEnabled>\n  </PropertyGroup>\n  <PropertyGroup Condition=" \'$(Configuration)|$(Platform)\' == \'Debug|AnyCPU\' ">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <DefineDebug>true</DefineDebug>\n    <DefineTrace>true</DefineTrace>\n    <OutputPath>..\\..\\..\\NfseService\\bin\\</OutputPath>\n    <DocumentationFile>c2931350.xml</DocumentationFile>\n    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022,42353,42354,42355</NoWarn>\n    <Prefer32Bit>false</Prefer32Bit>\n  </PropertyGroup>\n  <PropertyGroup Condition=" \'$(Configuration)|$(Platform)\' == \'Release|AnyCPU\' ">\n    <DebugType>pdbonly</DebugType>\n    <DefineDebug>false</DefineDebug>\n    <DefineTrace>true</DefineTrace>\n    <Optimize>true</Optimize>\n    <OutputPath>..\\..\\..\\NfseService\\bin\\</OutputPath>\n    <DocumentationFile>c2931350.xml</DocumentationFile>\n    <NoWarn>42016,41999,42017,42018,42019,42032,42036,42020,42021,42022,42353,42354,42355</NoWarn>\n    <Prefer32Bit>false</Prefer32Bit>\n  </PropertyGroup>\n  <ItemGroup>\n    <Reference Include="GrapeCity.ActiveReports.Document.v7, Version=7.1.7470.0, Culture=neutral, PublicKeyToken=cc4967777c49a3ff, processorArchitecture=MSIL">\n      <SpecificVersion>False</SpecificVersion>\n    </Reference>\n    <Reference Include="GrapeCity.ActiveReports.Extensibility.v7, Version=7.1.7470.0, Culture=neutral, PublicKeyToken=cc4967777c49a3ff, processorArchitecture=MSIL">\n      <SpecificVersion>False</SpecificVersion>\n    </Reference>\n    <Reference Include="GrapeCity.ActiveReports.v7, Version=7.1.7470.0, Culture=neutral, PublicKeyToken=cc4967777c49a3ff, processorArchitecture=MSIL">\n      <SpecificVersion>False</SpecificVersion>\n    </Reference>\n    <Reference Include="GrapeCity.ActiveReports.Viewer.Win.v7, Version=7.1.7470.0, Culture=neutral, PublicKeyToken=cc4967777c49a3ff, processorArchitecture=MSIL">\n      <SpecificVersion>False</SpecificVersion>\n    </Reference>\n    <Reference Include="System" />\n    <Reference Include="System.Data" />\n    <Reference Include="System.Data.DataSetExtensions" />\n    <Reference Include="System.Xml" />\n    <Reference Include="System.Drawing" />\n    <Reference Include="System.EnterpriseServices" />\n    <Reference Include="System.Security">\n      <Private>True</Private>\n    </Reference>\n    <Reference Include="System.Web" />\n    <Reference Include="System.Web.Services" />\n    <Reference Include="System.Windows.Forms" />\n    <Reference Include="System.Drawing" />\n    <Reference Include="System.EnterpriseServices" />\n    <Reference Include="System.Security">\n      <Private>True</Private>\n    </Reference>\n    <Reference Include="System.Web" />\n    <Reference Include="System.Web.Services" />\n    <Reference Include="System.Windows.Forms" />\n    <Reference Include="CClass, Version=1.0.3565.15837, Culture=neutral, processorArchitecture=MSIL">\n      <HintPath>..\\..\\..\\cclass\\bin\\CClass.dll</HintPath>\n      <SpecificVersion>False</SpecificVersion>\n      <Private>True</Private>\n    </Reference>\n    <Reference Include="CertificadoDigital, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">\n      <HintPath>..\\..\\..\\CertificadoDigital\\bin\\CertificadoDigital.dll</HintPath>\n      <SpecificVersion>False</SpecificVersion>\n    </Reference>\n    <Reference Include="NFDApi, Version=1.0.6.0, Culture=neutral, PublicKeyToken=a1cc17a5de42bd98, processorArchitecture=MSIL">\n      <SpecificVersion>False</SpecificVersion>\n      <HintPath>O:\\\\NFDApi.dll</HintPath>\n      <Private>True</Private>\n    </Reference>\n    <Reference Include="NFSeWebService, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">\n      <HintPath>..\\..\\NFSeWebService\\bin\\NFSeWebService.dll</HintPath>\n      <SpecificVersion>False</SpecificVersion>\n      <Private>True</Private>\n    </Reference>\n    <Reference Include="NFSe_Util, Version=0.1.0.0, Culture=neutral, PublicKeyToken=381306f9e772095e, processorArchitecture=x86">\n      <SpecificVersion>False</SpecificVersion>\n      <HintPath>O:\\\\NFSe_Util.dll</HintPath>\n    </Reference>\n    <Reference Include="Sistema.Ws.Nfse.Client, Version=1.0.0.2, Culture=neutral, processorArchitecture=MSIL">\n      <SpecificVersion>False</SpecificVersion>\n      <HintPath>O:\\\\Sistema.Ws.Nfse.Client.dll</HintPath>\n    </Reference>\n    <Reference Include="System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86">\n      <SpecificVersion>False</SpecificVersion>\n      <HintPath>C:\\WINDOWS\\assembly\\GAC_32\\System.Data.OracleClient\\2.0.0.0__b77a5c561934e089\\System.Data.OracleClient.dll</HintPath>\n    </Reference>\n    <Reference Include="System.Drawing" />\n    <Reference Include="System.EnterpriseServices" />\n    <Reference Include="System.Security">\n      <Private>True</Private>\n    </Reference>\n    <Reference Include="System.Web" />\n    <Reference Include="System.Web.Services" />\n    <Reference Include="System.Windows.Forms" />\n    <Reference Include="NFSeCore, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">\n      <HintPath>..\\..\\NFSeCore\\bin\\NFSeCore.dll</HintPath>\n      <SpecificVersion>False</SpecificVersion>\n      <Private>True</Private>\n    </Reference>\n  </ItemGroup>\n  <ItemGroup>\n    <Import Include="Microsoft.VisualBasic" />\n    <Import Include="System" />\n    <Import Include="System.Collections" />\n    <Import Include="System.Collections.Generic" />\n    <Import Include="System.Data" />\n    <Import Include="System.Diagnostics" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include="My Project\\AssemblyInfo.vb" />\n    <Compile Include="My Project\\Application.Designer.vb">\n      <AutoGen>True</AutoGen>\n      <DependentUpon>Application.myapp</DependentUpon>\n    </Compile>\n    <Compile Include="My Project\\Resources.Designer.vb">\n      <AutoGen>True</AutoGen>\n      <DesignTime>True</DesignTime>\n      <DependentUpon>Resources.resx</DependentUpon>\n    </Compile>\n    <Compile Include="My Project\\Settings.Designer.vb">\n      <AutoGen>True</AutoGen>\n      <DependentUpon>Settings.settings</DependentUpon>\n      <DesignTimeSharedInput>True</DesignTimeSharedInput>\n    </Compile>\n    <Compile Include="TransmiteLote.vb" />\n    <Compile Include="PropriedadesXML.vb" />\n    <Compile Include="PropriedadeCertificado.vb" />\n    <Compile Include="MakeXML.vb" />\n    <Compile Include="ImprimirNFSe.vb" />\n    <Compile Include="ConsultarNfseRps.vb" />\n    <Compile Include="ConsultarLote.vb" />\n    <Compile Include="CancelamentoNFSe.vb" />\n  </ItemGroup>\n  <ItemGroup>\n    <EmbeddedResource Include="My Project\\Resources.resx">\n      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>\n      <LastGenOutput>Resources.Designer.vb</LastGenOutput>\n      <CustomToolNamespace>My.Resources</CustomToolNamespace>\n      <SubType>Designer</SubType>\n    </EmbeddedResource>\n  </ItemGroup>\n  <ItemGroup>\n    <None Include="My Project\\Application.myapp">\n      <Generator>MyApplicationCodeGenerator</Generator>\n      <LastGenOutput>Application.Designer.vb</LastGenOutput>\n    </None>\n    <None Include="My Project\\Settings.settings">\n      <Generator>SettingsSingleFileGenerator</Generator>\n      <CustomToolNamespace>My</CustomToolNamespace>\n      <LastGenOutput>Settings.Designer.vb</LastGenOutput>\n    </None>\n  </ItemGroup>\n  <ItemGroup>\n    <BootstrapperPackage Include="Microsoft.Net.Client.3.5">\n      <Visible>False</Visible>\n      <ProductName>.NET Framework 3.5 SP1 Client Profile</ProductName>\n      <Install>false</Install>\n    </BootstrapperPackage>\n    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">\n      <Visible>False</Visible>\n      <ProductName>.NET Framework 3.5 SP1</ProductName>\n      <Install>true</Install>\n    </BootstrapperPackage>\n  </ItemGroup>\n  <Import Project="$(MSBuildBinPath)\\Microsoft.VisualBasic.targets" />\n  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. \n       Other similar extension points exist, see Microsoft.Common.targets.\n  <Target Name="BeforeBuild">\n  </Target>\n  <Target Name="AfterBuild">\n  </Target>\n  -->\n</Project>""").replace("c2931350",self.Nome_dll)

    #Uma variavel para cada script
    if copiar== False:
      self.make = ""
      self.transmite = ""
      self.consultaLote = ""
      self.ConsultarNfseRps = ""
      self.Cancela = ""
      self.Imprimir = ""
      self.criaPropXml = ""
      self.PropriedadeCertificado = ""
      #self.sln = ""
      #self.mvbproj = ""


    #Significa que vai copiar uma modelo semelhante. Nesse caso, é necessário apenas abrir e copiar os arquivos, não sendo necessário implementar 
    #dentro das funções Que criam os scripts
    elif copiar == True:
      '''
      Caso o projeto que ele vai copiar seja uma cidade que não segue modelo, ou seja, tenha modelo próprio, o nome do projeto deve obrigatoriamente 
      começar com CODIGO IBG seguido de um underline(_).
      Isso é requerido pois assim ele consegue pegar o nome dos arquivos sln e vbproj, sem precisar passar o nome da dll, apenas com o nome do projeto
      '''

      #Abre os arquivos que serão copiados
      try:
        f = open(Nome_proj_copia+"/MakeXML.vb", encoding = "ISO-8859-1")
        self.make = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/TransmiteLote.vb", encoding = "ISO-8859-1")
        self.transmite = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/ConsultarLote.vb", encoding = "ISO-8859-1")
        self.consultaLote = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/ConsultarNfseRps.vb", encoding = "ISO-8859-1")
        self.ConsultarNfseRps = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/CancelamentoNFSe.vb",encoding = "ISO-8859-1")
        self.Cancela = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/ImprimirNFSe.vb",encoding = "ISO-8859-1")
        self.Imprimir = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/PropriedadesXML.vb", encoding = "ISO-8859-1")
        self.criaPropXml = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        f = open(Nome_proj_copia+"/PropriedadeCertificado.vb", encoding = "ISO-8859-1")
        self.PropriedadeCertificado = (f.read()).replace(self.Nome_copia_dll, self.Nome_dll)
        f.close()

        '''f = open(Nome_proj_copia+"/c"+Nome_proj_copia.split("_")[0]+".sln", encoding = "ISO-8859-1")
        self.sln = (f.read()).replace(self.Nome_copia_dll, "c"+Nomeprojeto)
        f.close()

        f = open(Nome_proj_copia+"/c"+Nome_proj_copia.split("_")[0]+".vbproj", encoding = "ISO-8859-1")
        self.mvbproj = (f.read()).replace(self.Nome_copia_dll, "c"+Nomeprojeto)
        f.close()'''

      except:
        raise Exception("Problema na copia do modelo")

    else:
      raise Exception("Opcao Invalida, copiar deve ser True ou False")

  #Cria a pasta dos scripts
  def criaPasta(self):
    #Checa se o diretório já existe, caso exista, exclue e cria um novo
    if not os.path.exists(self.Nomeprojeto):
      os.mkdir(self.Nomeprojeto)
      #Cria pasta do My Project
      os.mkdir(self.Nomeprojeto+"/My Project")
    else:
      shutil.rmtree(self.Nomeprojeto)
      os.mkdir(self.Nomeprojeto)
      #Cria pasta do My Project
      os.mkdir(self.Nomeprojeto+"/My Project")



   

  def criaMakeXml(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/MakeXML.vb","w", encoding = 'utf-8')
      f.write(self.make)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaTransmiteLote(self, Usuario=False, Senha=False, SoapAction="",Criptografar=False):
    '''Login e senha
    Senha usa MD5 ou SHA1
    IsRetornoEnvioOk
    SoapAction
    Estrutura do envelope
    Precisa criptografar as tags'''

    #Cria o transmite
    transmite = Transmite(Usuario, Senha, SoapAction, Criptografar, self.Is_Sincrono)
    

    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/TransmiteLote.vb","w", encoding = 'utf-8')       
      f.write(self.transmite)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaConsultaLote(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/ConsultarLote.vb","w", encoding = 'utf-8') 
      f.write(self.consultaLote)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaConsultaRps(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/ConsultarNfseRps.vb","w", encoding = 'utf-8')
      f.write(self.ConsultarNfseRps)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaCancela(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/CancelamentoNfse.vb","w", encoding = 'utf-8')
      f.write(self.Cancela)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaImprimir(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/ImprimirNFSe.vb","w", encoding = 'utf-8')
      f.write(self.Imprimir)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaProprXml(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/PropriedadesXML.vb","w", encoding = 'utf-8')
      f.write(self.criaPropXml)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaPropCertificado(self):
    #Checa se é para copiar
    if self.copiar == True:
      f = open(self.Nomeprojeto+"/PropriedadeCertificado.vb","w", encoding = 'utf-8')
      f.write(self.PropriedadeCertificado)
      f.close()
    elif self.copiar == False:
      #Todo
      pass

  def criaSln(self):
    f =  open(self.Nomeprojeto+"/"+self.Nome_dll+".sln","w", encoding = 'utf-8')
    f.write(self.sln)
    f.close()

  def criaVbProj(self):
    f =  open(self.Nomeprojeto+"/"+self.Nome_dll+".vbproj","w", encoding = 'utf-8')
    f.write(self.vbproj)
    f.close()

  def criaApplicationDesigner(self):
    f =  open(self.Nomeprojeto+"/My Project/Application.Designer.vb","w", encoding = 'utf-8')
    f.write(self.AppDesigner)
    f.close()

  def criaApplicationMyApp(self):
    f =  open(self.Nomeprojeto+"/My Project/Application.myapp","w", encoding = 'utf-8')
    f.write(self.AppMyapp)
    f.close() 

  def criaAssemblyInfo(self):
    f =  open(self.Nomeprojeto+"/My Project/AssemblyInfo.vb","w", encoding = 'utf-8')
    f.write(self.AssemblyInfo)
    f.close()

  def criaResourcesDesigner(self):
    f =  open(self.Nomeprojeto+"/My Project/Resources.Designer.vb","w", encoding = 'utf-8')
    f.write(self.ResourcesDesigner)
    f.close()

  def criaResourcesresx(self):
    f =  open(self.Nomeprojeto+"/My Project/Resources.resx","w", encoding = 'utf-8')
    f.write(self.ResourcesResx)
    f.close()

  def criaSettingsDesigner(self):
    f =  open(self.Nomeprojeto+"/My Project/Settings.Designer.vb","w", encoding = 'utf-8')
    f.write(self.SettingsDesigner)
    f.close()

  def criaSettingssettings(self):
    f =  open(self.Nomeprojeto+"/My Project/Settings.settings","w", encoding = 'utf-8')
    f.write(self.SettingsSettings)
    f.close()

  def cria_scripts(self):

    #Cria os arquivos do projeto 
    
    #Monta o make xml
    self.criaMakeXml()

    #Transmite o xml
    self.criaTransmiteLote()

    #Para quando for assincrono
    self.criaConsultaLote()

    #Consulta da nota por rps
    self.criaConsultaRps()

    #Cancela a nota
    self.criaCancela()

    #Imprimir Nfse
    self.criaImprimir()

    #Propriedades do XML
    self.criaProprXml()

    #Propriedades do certificado
    self.criaPropCertificado()

    #sln
    self.criaSln()

    #vbproj
    self.criaVbProj()

    #Pasta My Project
    self.criaApplicationDesigner()
    self.criaApplicationMyApp()
    self.criaAssemblyInfo()
    self.criaResourcesDesigner()
    self.criaResourcesresx()
    self.criaSettingsDesigner()
    self.criaSettingssettings()

class Transmite():

  def __init__(self, Usuario, Senha, SoapAction, Criptografar, isSincrono, envelope, Nome_dll , TagProtocolo, CaminhoRejeicao,MD5 = False, Substituido=False):

    self.XML = ""
    self.Usuario = Usuario
    self.Senha = Senha
    self.SoapAction = SoapAction
    self.Criptografar = Criptografar
    self.isSincrono = isSincrono
    self.MD5 = MD5
    self.substituido = Substituido
    self.Nome_dll = Nome_dll
    self.TagProtocolo = TagProtocolo
    self.CaminhoRejeicao = CaminhoRejeicao


  def usuario(self):
    usuario = """Public Function getUsuario(Byval idEmpresa as Long, Optional criptografar as Boolean = False) as String
                    Dim usuario  As String = ParametroUtil.GetParametro(idEmpresa, "USUARIO")
                    LogInfo(idEmpresa, "TransmiteLote processar USUARIO: " + usuario)
                    Return usuario\nEnd Function\n"""

    self.XML+= usuario+"\n"

  def senha(self, MD5=False):
    senha = """Public Function getSenha(Byval idEmpresa as Long, Optional criptografar as Boolean = False) as String
                  Dim senha  As String = ParametroUtil.GetParametro(idEmpresa, "SENHA")
                  """
    if MD5 == True:
      senha += "senha = GerarMD5(senha)\n"

    senha +="""Return senha\nEnd Function\n"""

    #MUDAR PARA RETURN
    self.XML+=senha+"\n"

  def montarTransmite(self):
    #self.Processar()
    self.cabecalho()
    self.Processar()
    if self.Usuario!=False:
      self.usuario()
    if self.Senha!=False:
      self.senha()
    self.IsRetornoEnvioOk()
    self.GetMotivoRejeicao()
    self.XML+="""End Class
End Namespace"""

    pass


  #Pegar o retorno do SOAP
  #self.XML+= "Dim node As XmlNode = responseSOAP.SelectSingleNode(GetXpathFromString("+'"'+ Caminho +'"))'

  def IsRetornoEnvioOk(self):
    retornoOk = """Public Overrides Function isRetornoEnvioOk(ByRef xml As String) As Boolean
            ' verificar se o retorno é XML
            Dim xmldoc As XmlDocument = New XmlDocument

            Try
                xmldoc.LoadXml(xml)
            Catch ex As Exception
                Throw New FalhaException("Erro ao processar retorno: O conteúdo retornado não é XML - " + ex.Message + "Conteúdo retornado: " + xml, ex)
            End Try

            Dim protocolo As String = XmlUtil.getValorTag(xmldoc, """+'"'+self.TagProtocolo+'"'+""")

            If protocolo.Trim.Length = 0 Then
                Return False
            End If

            Return True\nEnd Function\n"""
    self.XML+=retornoOk+"\n"

  def GetMotivoRejeicao(self):
    motivoRejeicao ="""Protected Function GetMotivoRejeicaoFunction(ByVal xml As String, ByVal xpath As String) As String
            Dim xmldoc As New XmlDocument()
            Dim result As String = ""
            Dim nodes As XmlNodeList = Nothing
            Dim primeiraLinha As Boolean = True

            Try
                xmldoc.LoadXml(xml)

                nodes = xmldoc.SelectNodes(xpath)
                If nodes IsNot Nothing AndAlso nodes.Count > 0 Then
                    For Each node As XmlNode In nodes
                        If node.ChildNodes.Count > 0 Then
                            For Each cNode As XmlNode In node.ChildNodes
                                result += Chr(13) + Chr(10) + cNode.Name + " : " + cNode.InnerText
                            Next
                        Else
                            result += node.Name + " : " + node.InnerText
                        End If
                    Next
                Else
                    result = xml
                End If

                If result Is Nothing OrElse result.Trim.Length = 0 Then
                    result = xml
                End If

                Return result
            Catch ex As Exception
                ' retornar o xml que veio da prefeitura, pois o erro que aconteceu nao era esperado
                Return xml
            Finally
                xmldoc = Nothing
                nodes = Nothing
                xpath = Nothing
            End Try\nEnd Function\n\nProtected Overrides Function GetMotivoRejeicao(ByVal xmlRetorno As String) As String\n\n"""

    #Tira espaço
    caminhoRejeicao = self.CaminhoRejeicao.replace(" ","")

    motivoRejeicao+= '''\tDim xpath As String = APropriedadesXML.GetXpathFromCollection(New String() {'''+caminhoRejeicao+'''})\n\tReturn GetMotivoRejeicaoFunction(xmlRetorno, xpath)\nEnd Function\n'''

    begin = motivoRejeicao.index("{")
    end = motivoRejeicao.index("}")
    motivoRejeicao = motivoRejeicao[:begin] + motivoRejeicao[begin:end+1].replace('{','{"').replace('}','"}').replace(',','","') + motivoRejeicao[end+1:]
    self.XML += motivoRejeicao+"\n"

  def Processar(self):
    processar = """Public Overrides Sub processar(ByRef movimento As NfseMovimentoData)
          Dim ambiente As TipoAmbiente = Nothing
          Dim certificado As X509Certificate = Nothing
          Dim usarProxy As Boolean = False
          Dim result As Object = Nothing
          Dim responseSOAP As New XmlDocument()
          Dim propCertificado As IPropriedadeCertificado = Nothing
          Dim url As String = Nothing
          Dim soapAction As String = """+'"'+self.SoapAction+'"'+"""
          Dim xmlRetorno As String
          Dim empresaData As NfseEmpresasData = GetIntegracaoEmpresa(movimento.numrCnpj)
          Dim substituidoData As New NfseSubstituidoData
          substituidoData = GetIntegracaoSubstituido(movimento.tipoRps, movimento.serieRps, movimento.numeroRps, movimento.numrCnpj)
          Dim xml As String
          Try\n"""

    if self.Usuario ==True:
      processar+="""Dim usuario As String
          usuario = getUsuario(empresaData.idEmpresa)\n"""

    if self.Senha ==True:
      processar+= """Dim senha As String
          senha = getSenha(empresaData.idEmpresa)\n"""

    processar+= """'obter o ambiente producao ou homologacao
          ambiente = ParametroUtil.GetParametro(movimento.idEmpresa, "AMBIENTE")
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 1")
          ' obter a classe especifica para gerenciar o certificado para esta cidade
          propCertificado = FactoryCore.GetPropriedadeCertificado(conn, trans, factory, publicVar, empresaData.codgCidade)

          certificado = propCertificado.GetCertificadoTransmissao(CInt(empresaData.idEmpresa), movimento.numrCnpj)
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 2")
          If certificado Is Nothing Then
            Throw New FalhaException("Erro ao obter certificado digital, para TRANSMISSÃO, através do nº do documento informado : " + movimento.numrCnpj)
          End If
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 3")
          If ambiente = TipoAmbiente.HOMOLOGACAO Then
            url = ParametroUtil.GetParametroCidade(empresaData.codgCidade, "URL_AMBIENTE_HOMOLOGACAO")
          Else
            url = ParametroUtil.GetParametroCidade(empresaData.codgCidade, "URL_AMBIENTE_PRODUCAO")
          End If
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 4: " + url)
          Dim PropriedadesXML As IPropriedadesXML = FactoryCore.GetPropriedadesXML(empresaData.codgCidade)
          xml = movimento.xmlNota
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 5: " + xml)\n"""

      #Usuario devera mudar o envelope de acordo com o WSDL, se precisar de senha usuario etc
      
      #Caso layou tenha substituição e ,seja o layou de envio do substituido seja totalmente diferente do envio de uma nova nota
    if self.substituido == True:
        processar+= """"If substituidoData Is Nothing Then
                        ' ESCREVER O LAYOUT DO ENVELOPE DE ENVIO NOVO
                        xml = <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">   
                                <Body>
                                  <GerarNfseRequest xmlns="http://nfse.abrasf.org.br"> 
                                    <nfseCabecMsg xmlns="">[string]</nfseCabecMsg> 
                                    <nfseDadosMsg xmlns="">[string]</nfseDadosMsg> 
                                  </GerarNfseRequest> 
                                </Body> 
                              </Envelope>

                        ' ESCREVER O LAYOUT DO ENVELOPE DE SUBSTITUIÇÃO      
                        else
                          xml = <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">   
                                  <Body>
                                    <GerarNfseRequest xmlns="http://nfse.abrasf.org.br"> 
                                      <nfseCabecMsg xmlns="">[string]</nfseCabecMsg> 
                                      <nfseDadosMsg xmlns="">[string]</nfseDadosMsg> 
                                    </GerarNfseRequest> 
                                  </Body> 
                                </Envelope>
                          End If\n"""
    else:
        processar+= """xml = <Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">   
                                <Body>
                                  <GerarNfseRequest xmlns="http://nfse.abrasf.org.br"> 
                                    <nfseCabecMsg xmlns="">[string]</nfseCabecMsg> 
                                    <nfseDadosMsg xmlns="">[string]</nfseDadosMsg> 
                                  </GerarNfseRequest> 
                                </Body> 
                              </Envelope>\n"""

    processar+= """LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 5-1 :" + xml)
          Dim doc As XmlDocument = New XmlDocument()
          doc.PreserveWhitespace = True
          doc.LoadXml(xml)
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 6")
          xmlRetorno = HTTPSoapTextRequest(certificado, doc, url, empresaData.idEmpresa, soapAction)
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 7 :" + xmlRetorno)
          responseSOAP.LoadXml(xmlRetorno)
          Dim node As XmlNode\n"""

    if self.substituido == True:
        processar+="""If substituidoData Is Nothing Then
                    node = responseSOAP.SelectSingleNode(GetXpathFromString("Envelope, Body, gerarNfseResponse"))
                Else
                    node = responseSOAP.SelectSingleNode(GetXpathFromString("Envelope, Body, substituirNfseResponse"))
                End If\n"""
    else:
        processar+="""node = responseSOAP.SelectSingleNode(GetXpathFromString("Envelope, Body, gerarNfseResponse"))\n"""

    processar+= """LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 8")
          If node Is Nothing Then
            Throw New FalhaException("Retorno da transmissão do lote a prefeitura não pode ser processado: objeto veio nulo. Retorno: " + xmlRetorno)
          End If
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 9")
          movimento.xmlRetorno = node.InnerXml\n"""

    processar+= """Catch ex As Exception
          Dim docErro As XmlDocument = New XmlDocument()
          LogInfo(empresaData.idEmpresa, "TransmiteLote Processar 10: " + ex.Message)
          Try
            docErro.LoadXml(ex.InnerException.Message)
          Catch e As Exception
            Throw New Exception(ex.ToString)
          End Try
          If XmlUtil.getDocByTag(docErro, "faultstring") IsNot Nothing Then
            Throw New FalhaException("Erro no processo da PREFEITURA: " + XmlUtil.getValorTag(docErro, "faultstring"))
          End If

          If TypeOf ex Is FalhaException Then
            Throw ex
          Else
            Throw New FalhaException("Erro ao tentar transmitir cancelamento de NFSE: " + ex.Message, ex)
          End If
          End Try
        End Sub\n\n"""
    self.XML+= processar

  def cabecalho(self):
    cabecalho = """Imports CClass
Imports System.Security.Cryptography.X509Certificates
Imports System.Web.Services
Imports System.Xml
Imports System.Text.RegularExpressions
Imports CertificadoDigital
Imports NFSeWebService
Imports System.IO
Imports NFSeCore

Namespace """+self.Nome_dll+"""
  Public Class TransmiteLote
    Inherits ATransmiteLote

    Private isExternal As Boolean = False

    Public Sub New(ByRef conn As IDbConnection, _
        ByRef trans As IDbTransaction, _
        ByRef factory As DBFactory, _
        ByRef publicVar As PublicVar)
      MyBase.factory = factory
      MyBase.publicVar = publicVar
      MyBase.conn = conn
      MyBase.trans = trans
    End Sub

    Public Sub New(ByRef conn As IDbConnection, _
        ByRef trans As IDbTransaction, _
        ByRef factory As DBFactory, _
        ByRef publicVar As PublicVar, _
        ByVal isExternal As Boolean)
    MyBase.factory = factory
    MyBase.publicVar = publicVar
    MyBase.conn = conn
    MyBase.trans = trans
    Me.isExternal = isExternal
  End Sub\n\n"""

    self.XML += cabecalho

transmite = Transmite(Usuario=True, Senha=True, SoapAction="gerarNfse", Criptografar="", isSincrono=False, envelope= True, Nome_dll= "cFiorilli", TagProtocolo="CodVerificacao", CaminhoRejeicao="GerarNfseResposta, ListaMensagemRetorno, MensagemRetorno")
'''transmite.cabecalho()
transmite.usuario()
transmite.senha(False)
#print(transmite.XML)
transmite.IsRetornoEnvioOk("CodVerificao")
#print(transmite.XML)
transmite.GetMotivoRejeicao("GerarNfseResposta, ListaMensagemRetorno, MensagemRetorno")
transmite.IsRetornoEnvioOk("CodigoVerificacao")
#transmite.getEnvelope('<Envelope xmlns="http://schemas.xmlsoap.org/soap/envelope/">   <Body> <GerarNfseRequest xmlns="http://nfse.abrasf.org.br"> <nfseCabecMsg xmlns="">[string]</nfseCabecMsg> <nfseDadosMsg xmlns="">[string]</nfseDadosMsg> </GerarNfseRequest> </Body> </Envelope>')
transmite.Processar()'''
transmite.montarTransmite()
print(transmite.XML)

proj = automateNfse(Nomeprojeto = "Centi3",Nome_dll = "cCenti3",copiar = True,Nome_proj_copia = "Centi2",Nome_copia_dll = "cCenti2")
proj.criaPasta()

proj.make

proj.cria_scripts()

#Faz o download da pasta do projeto
import shutil
shutil.make_archive(proj.Nomeprojeto, 'zip',proj.Nomeprojeto)